// scripts/admin_dashboard.js
document.addEventListener('DOMContentLoaded', () => {
  // Check authentication
  chrome.storage.sync.get('authData', (data) => {
    if (!data.authData) {
      // Redirect to login if not authenticated
      window.location.href = 'login.html';
      return;
    }
    
    const { token, username, role, expiresAt } = data.authData;
    
    // Check if token is expired
    if (expiresAt && expiresAt < Date.now()) {
      // Token expired, redirect to login
      chrome.storage.sync.remove('authData');
      window.location.href = 'login.html';
      return;
    }
    
    // Check if user trying to access admin dashboard without admin role
    if (role !== 'admin') {
      window.location.href = 'user_dashboard.html';
      return;
    }
    
    // Populate user info
    populateUserInfo(username, role);
  });
  
  // Populate user information in sidebar
  function populateUserInfo(username, role) {
    const userNameElement = document.querySelector('.user-name');
    const userRoleElement = document.querySelector('.user-role');
    
    if (userNameElement) {
      userNameElement.textContent = username;
    }
    
    if (userRoleElement) {
      userRoleElement.textContent = role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Ng∆∞·ªùi d√πng';
    }
  }
  
  // Handle logout
  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', () => {
      // Show confirmation dialog
      if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
        // Clear authentication data
        chrome.storage.sync.remove('authData', () => {
          // Redirect to login page
          window.location.href = 'login.html';
        });
      }
    });
  }
  
  // Handle navigation
  const navLinks = document.querySelectorAll('.sidebar-nav a');
  const sections = document.querySelectorAll('.dashboard-section');
  
  navLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      
      // Update active navigation
      navLinks.forEach(link => link.parentElement.classList.remove('active'));
      this.parentElement.classList.add('active');
      
      // Show target section
      sections.forEach(section => {
        section.classList.remove('active');
        if (section.id === targetId) {
          section.classList.add('active');
        }
      });
    });
  });
  
  // Initialize export functionality
  initializeExport();
  
  // Initialize user management
  initializeUserManagement();
  
  // Initialize alerts management
  initializeAlerts();
  
  // Initialize reports functionality
  initializeReports();
  
  // Initialize settings page
  initializeSettings();
});

// Export functionality
function initializeExport() {
  const exportAllBtn = document.getElementById('export-all-btn');
  if (!exportAllBtn) return;
  
  exportAllBtn.addEventListener('click', () => {
    // Create export menu options
    const menuOptions = [
      { format: 'excel', label: 'Excel (.xlsx)', icon: 'üìä' },
      { format: 'csv', label: 'CSV (.csv)', icon: 'üìã' },
      { format: 'pdf', label: 'PDF (.pdf)', icon: 'üìÑ' },
      { format: 'print', label: 'In b√°o c√°o', icon: 'üñ®Ô∏è' }
    ];
    
    // Create dropdown menu
    const menu = document.createElement('div');
    menu.className = 'export-menu';
    
    menuOptions.forEach(option => {
      const menuItem = document.createElement('div');
      menuItem.className = 'export-option';
      menuItem.innerHTML = `<span class="export-icon">${option.icon}</span> ${option.label}`;
      menuItem.addEventListener('click', () => exportDashboard(option.format));
      menu.appendChild(menuItem);
    });
    
    // Remove existing menu if any
    const existingMenu = document.querySelector('.export-menu');
    if (existingMenu) {
      existingMenu.remove();
    }
    
    // Add menu to DOM
    exportAllBtn.parentNode.style.position = 'relative';
    exportAllBtn.parentNode.appendChild(menu);
    
    // Hide menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!menu.contains(event.target) && event.target !== exportAllBtn) {
        menu.remove();
      }
    }, { once: true });
  });
}

// Export dashboard data in different formats
function exportDashboard(format) {
  // Get current date for filename
  const now = new Date();
  const dateStr = now.toISOString().slice(0, 10);
  const filename = `toxic-detector-dashboard-${dateStr}`;
  
  // Show loading notification
  showNotification('ƒêang chu·∫©n b·ªã b√°o c√°o...', 'info');
  
  // Simulate processing delay
  setTimeout(() => {
    // Handle different export formats
    switch (format) {
      case 'excel':
        showNotification('ƒê√£ xu·∫•t b√°o c√°o Excel th√†nh c√¥ng', 'success');
        break;
      case 'csv':
        showNotification('ƒê√£ xu·∫•t b√°o c√°o CSV th√†nh c√¥ng', 'success');
        break;
      case 'pdf':
        showNotification('ƒê√£ xu·∫•t b√°o c√°o PDF th√†nh c√¥ng', 'success');
        break;
      case 'print':
        window.print();
        break;
    }
  }, 1500);
}

// User management functionality
function initializeUserManagement() {
  // Get user table
  const userTable = document.querySelector('#users .data-table tbody');
  if (!userTable) return;
  
  // Attach event listeners to user action buttons
  const actionButtons = userTable.querySelectorAll('.table-action');
  
  actionButtons.forEach(button => {
    button.addEventListener('click', function() {
      const action = this.getAttribute('title');
      const row = this.closest('tr');
      const userId = row.cells[0].textContent;
      const username = row.cells[1].textContent.trim();
      
      switch (action) {
        case 'Ch·ªânh s·ª≠a':
          editUser(userId, username);
          break;
        case 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u':
          resetPassword(userId, username);
          break;
        case 'V√¥ hi·ªáu h√≥a':
          disableUser(userId, username, row);
          break;
        case 'K√≠ch ho·∫°t':
          enableUser(userId, username, row);
          break;
      }
    });
  });
  
  // User search functionality
  const searchInput = document.querySelector('#users .search-box input');
  if (searchInput) {
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const rows = userTable.querySelectorAll('tr');
      
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        if (text.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
  }
  
  // Add user button
  const addUserBtn = document.querySelector('#users .primary-button');
  if (addUserBtn) {
    addUserBtn.addEventListener('click', () => {
      showAddUserModal();
    });
  }
}

// Edit user
function editUser(userId, username) {
  showModal(
    'Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng',
    `
    <form id="edit-user-form">
      <div class="form-group">
        <label for="edit-username">T√™n ng∆∞·ªùi d√πng</label>
        <input type="text" id="edit-username" value="${username}" required>
      </div>
      <div class="form-group">
        <label for="edit-email">Email</label>
        <input type="email" id="edit-email" value="${username}@example.com" required>
      </div>
      <div class="form-group">
        <label for="edit-role">Vai tr√≤</label>
        <select id="edit-role">
          <option value="user">Ng∆∞·ªùi d√πng</option>
          <option value="moderator">Ng∆∞·ªùi ki·ªÉm duy·ªát</option>
          <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
        </select>
      </div>
    </form>
    `,
    () => {
      // Handle form submission
      showNotification(`ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng ${username}`, 'success');
    }
  );
}

// Reset password
function resetPassword(userId, username) {
  showModal(
    'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
    `
    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng <strong>${username}</strong>?</p>
    <p>M·∫≠t kh·∫©u m·ªõi s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa ng∆∞·ªùi d√πng.</p>
    `,
    () => {
      // Handle confirmation
      showNotification(`ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng ${username}`, 'success');
    }
  );
}

// Disable user
function disableUser(userId, username, row) {
  showModal(
    'V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng',
    `
    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën v√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng <strong>${username}</strong>?</p>
    <p>Ng∆∞·ªùi d√πng s·∫Ω kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p cho ƒë·∫øn khi ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i.</p>
    `,
    () => {
      // Update UI
      const statusCell = row.querySelector('.status');
      statusCell.textContent = 'Kh√¥ng ho·∫°t ƒë·ªông';
      statusCell.className = 'status inactive';
      
      // Update action buttons
      const actionsCell = row.querySelector('.actions');
      actionsCell.innerHTML = `
        <button class="table-action" title="Ch·ªânh s·ª≠a">‚úèÔ∏è</button>
        <button class="table-action" title="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u">üîë</button>
        <button class="table-action" title="K√≠ch ho·∫°t">‚úì</button>
      `;
      
      // Add event listeners to new buttons
      initializeUserManagement();
      
      showNotification(`ƒê√£ v√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng ${username}`, 'success');
    }
  );
}

// Enable user
function enableUser(userId, username, row) {
  showModal(
    'K√≠ch ho·∫°t ng∆∞·ªùi d√πng',
    `
    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t ng∆∞·ªùi d√πng <strong>${username}</strong>?</p>
    `,
    () => {
      // Update UI
      const statusCell = row.querySelector('.status');
      statusCell.textContent = 'Ho·∫°t ƒë·ªông';
      statusCell.className = 'status active';
      
      // Update action buttons
      const actionsCell = row.querySelector('.actions');
      actionsCell.innerHTML = `
        <button class="table-action" title="Ch·ªânh s·ª≠a">‚úèÔ∏è</button>
        <button class="table-action" title="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u">üîë</button>
        <button class="table-action" title="V√¥ hi·ªáu h√≥a">üö´</button>
      `;
      
      // Add event listeners to new buttons
      initializeUserManagement();
      
      showNotification(`ƒê√£ k√≠ch ho·∫°t ng∆∞·ªùi d√πng ${username}`, 'success');
    }
  );
}

// Show add user modal
function showAddUserModal() {
  showModal(
    'Th√™m ng∆∞·ªùi d√πng m·ªõi',
    `
    <form id="add-user-form">
      <div class="form-group">
        <label for="add-username">T√™n ng∆∞·ªùi d√πng</label>
        <input type="text" id="add-username" required>
      </div>
      <div class="form-group">
        <label for="add-email">Email</label>
        <input type="email" id="add-email" required>
      </div>
      <div class="form-group">
        <label for="add-password">M·∫≠t kh·∫©u</label>
        <input type="password" id="add-password" required>
      </div>
      <div class="form-group">
        <label for="add-role">Vai tr√≤</label>
        <select id="add-role">
          <option value="user">Ng∆∞·ªùi d√πng</option>
          <option value="moderator">Ng∆∞·ªùi ki·ªÉm duy·ªát</option>
          <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
        </select>
      </div>
    </form>
    `,
    () => {
      // Get form values
      const username = document.getElementById('add-username').value;
      const email = document.getElementById('add-email').value;
      const role = document.getElementById('add-role').value;
      
      // In a real app, this would send data to the API
      console.log('Adding new user:', { username, email, role });
      
      // Show notification
      showNotification(`ƒê√£ th√™m ng∆∞·ªùi d√πng m·ªõi: ${username}`, 'success');
      
      // Refresh user list (in a real app, this would fetch updated data)
      // For demo, we'll just add a new row to the table
      const userTable = document.querySelector('#users .data-table tbody');
      if (userTable) {
        const newRow = document.createElement('tr');
        const nextId = userTable.querySelectorAll('tr').length + 1;
        
        newRow.innerHTML = `
          <td>${nextId}</td>
          <td class="with-avatar">
            <span class="avatar">üë®</span> ${username}
          </td>
          <td>${email}</td>
          <td><span class="badge ${role}">${role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : (role === 'moderator' ? 'Ng∆∞·ªùi ki·ªÉm duy·ªát' : 'Ng∆∞·ªùi d√πng')}</span></td>
          <td><span class="status active">Ho·∫°t ƒë·ªông</span></td>
          <td>${new Date().toLocaleDateString('vi-VN')}</td>
          <td>V·ª´a t·∫°o</td>
          <td class="actions">
            <button class="table-action" title="Ch·ªânh s·ª≠a">‚úèÔ∏è</button>
            <button class="table-action" title="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u">üîë</button>
            <button class="table-action" title="V√¥ hi·ªáu h√≥a">üö´</button>
          </td>
        `;
        
        userTable.appendChild(newRow);
        
        // Add event listeners to new row
        initializeUserManagement();
      }
    }
  );
}

// Alerts management
function initializeAlerts() {
  const alertsList = document.querySelector('.alerts-list');
  if (!alertsList) return;
  
  // Handle alert actions
  const alertActions = alertsList.querySelectorAll('.alert-action');
  
  alertActions.forEach(action => {
    action.addEventListener('click', function() {
      const alertItem = this.closest('.alert-item');
      const actionType = this.getAttribute('title');
      const alertTitle = alertItem.querySelector('.alert-title').textContent;
      
      switch (actionType) {
        case 'ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc':
          alertItem.style.opacity = '0.6';
          showNotification('ƒê√£ ƒë√°nh d·∫•u c·∫£nh b√°o l√† ƒë√£ ƒë·ªçc', 'success');
          break;
        case 'Chi ti·∫øt':
          showAlertDetails(alertTitle, alertItem);
          break;
        case 'Ch·∫∑n IP':
          showBlockIPModal(alertTitle);
          break;
        case 'C·∫£nh b√°o ng∆∞·ªùi d√πng':
          showWarnUserModal(alertTitle);
          break;
        case 'Th√™m v√†o c∆° s·ªü d·ªØ li·ªáu':
          showAddToDBModal(alertTitle);
          break;
      }
    });
  });
}

// Show alert details
function showAlertDetails(alertTitle, alertItem) {
  // Get alert type
  let alertType = 'default';
  if (alertItem.classList.contains('high')) alertType = 'high';
  if (alertItem.classList.contains('medium')) alertType = 'medium';
  if (alertItem.classList.contains('low')) alertType = 'low';
  
  // Create sample details based on alert type
  let detailsHTML = '';
  
  if (alertType === 'high') {
    detailsHTML = `
      <div class="alert-detail-section">
        <h4>Th√¥ng tin IP</h4>
        <p><strong>ƒê·ªãa ch·ªâ IP:</strong> 192.168.1.45</p>
        <p><strong>V·ªã tr√≠:</strong> H√† N·ªôi, Vi·ªát Nam</p>
        <p><strong>ISP:</strong> Viettel</p>
      </div>
      <div class="alert-detail-section">
        <h4>C√°c b√¨nh lu·∫≠n c√≥ v·∫•n ƒë·ªÅ</h4>
        <div class="comment-list">
          <div class="comment-item hate">
            <div class="comment-text">"T√¥i gh√©t t·∫•t c·∫£ nh·ªØng ai nghƒ© kh√°c t√¥i, h·ªç n√™n bi·∫øn m·∫•t kh·ªèi th·∫ø gi·ªõi n√†y"</div>
            <div class="comment-meta">Facebook - 12:30 15/03/2025</div>
          </div>
          <div class="comment-item hate">
            <div class="comment-text">"D√¢n t·ªôc ƒë√≥ n√™n b·ªã x√≥a s·ªï ho√†n to√†n, kh√¥ng c√≤n m·ªôt ai"</div>
            <div class="comment-meta">YouTube - 12:31 15/03/2025</div>
          </div>
          <div class="comment-item hate">
            <div class="comment-text">"T√¥i mu·ªën g√¢y t·ªïn h·∫°i cho t·∫•t c·∫£ nh·ªØng ng∆∞·ªùi kh√¥ng ƒë·ªìng √Ω v·ªõi quan ƒëi·ªÉm c·ªßa t√¥i"</div>
            <div class="comment-meta">Twitter - 12:33 15/03/2025</div>
          </div>
        </div>
      </div>
    `;
  } else if (alertType === 'medium') {
    detailsHTML = `
      <div class="alert-detail-section">
        <h4>Th√¥ng tin ng∆∞·ªùi d√πng</h4>
        <p><strong>T√™n ng∆∞·ªùi d√πng:</strong> user123</p>
        <p><strong>Email:</strong> user123@example.com</p>
        <p><strong>Ng√†y ƒëƒÉng k√Ω:</strong> 10/02/2025</p>
      </div>
      <div class="alert-detail-section">
        <h4>L·ªãch s·ª≠ b√°o c√°o</h4>
        <ul>
          <li>15/03/2025 - B√°o c√°o b·ªüi user456: "Ng√¥n t·ª´ x√∫c ph·∫°m"</li>
          <li>14/03/2025 - B√°o c√°o b·ªüi user789: "B√¨nh lu·∫≠n g√¢y kh√≥ ch·ªãu"</li>
          <li>12/03/2025 - B√°o c√°o b·ªüi user234: "Ng√¥n t·ª´ kh√¥ng ph√π h·ª£p"</li>
          <li>10/03/2025 - B√°o c√°o b·ªüi user567: "X√∫c ph·∫°m ng∆∞·ªùi kh√°c"</li>
          <li>08/03/2025 - B√°o c√°o b·ªüi user890: "B√¨nh lu·∫≠n ti√™u c·ª±c"</li>
        </ul>
      </div>
    `;
  } else {
    detailsHTML = `
      <div class="alert-detail-section">
        <h4>M·∫´u spam m·ªõi</h4>
        <div class="spam-sample">
          <p>"Gi·∫£m gi√° 90% t·∫•t c·∫£ s·∫£n ph·∫©m ch√≠nh h√£ng! Mua ngay k·∫ªo h·∫øt: bit.ly/abcxyz"</p>
        </div>
      </div>
      <div class="alert-detail-section">
        <h4>Ph√¢n t√≠ch</h4>
        <p>M·∫´u n√†y s·ª≠ d·ª•ng k·ªπ thu·∫≠t ƒë√°nh l·ª´a m·ªõi, k·∫øt h·ª£p c√°c t·ª´ kh√≥a "ch√≠nh h√£ng" ƒë·ªÉ tr√°nh b·ªô l·ªçc.</p>
        <p>T·ª∑ l·ªá xu·∫•t hi·ªán: 23 l·∫ßn trong 2 gi·ªù qua</p>
        <p>N·ªÅn t·∫£ng: Facebook (78%), Twitter (22%)</p>
      </div>
    `;
  }
  
  showModal(
    alertTitle,
    detailsHTML,
    null, // No confirmation action
    false // No confirmation button
  );
}

// Show block IP modal
function showBlockIPModal(alertTitle) {
  showModal(
    'Ch·∫∑n ƒë·ªãa ch·ªâ IP',
    `
    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫∑n ƒë·ªãa ch·ªâ IP li√™n quan ƒë·∫øn c·∫£nh b√°o:</p>
    <p><strong>${alertTitle}</strong></p>
    <div class="form-group">
      <label for="block-duration">Th·ªùi gian ch·∫∑n:</label>
      <select id="block-duration">
        <option value="24h">24 gi·ªù</option>
        <option value="48h">48 gi·ªù</option>
        <option value="1w">1 tu·∫ßn</option>
        <option value="1m">1 th√°ng</option>
        <option value="perm" selected>Vƒ©nh vi·ªÖn</option>
      </select>
    </div>
    <div class="form-group">
      <label for="block-reason">L√Ω do:</label>
      <textarea id="block-reason" rows="3">Ph√°t hi·ªán ng√¥n t·ª´ th√π gh√©t</textarea>
    </div>
    `,
    () => {
      const duration = document.getElementById('block-duration').value;
      showNotification(`ƒê√£ ch·∫∑n IP ƒë·∫øn ${duration === 'perm' ? 'vƒ©nh vi·ªÖn' : duration}`, 'success');
    }
  );
}

// Show warn user modal
function showWarnUserModal(alertTitle) {
  showModal(
    'C·∫£nh b√°o ng∆∞·ªùi d√πng',
    `
    <p>G·ª≠i c·∫£nh b√°o ƒë·∫øn ng∆∞·ªùi d√πng li√™n quan ƒë·∫øn:</p>
    <p><strong>${alertTitle}</strong></p>
    <div class="form-group">
      <label for="warning-template">M·∫´u c·∫£nh b√°o:</label>
      <select id="warning-template">
        <option value="offensive">Ng√¥n t·ª´ x√∫c ph·∫°m</option>
        <option value="hate" selected>Ng√¥n t·ª´ th√π gh√©t</option>
        <option value="spam">Spam/Qu·∫£ng c√°o tr√°i ph√©p</option>
        <option value="custom">T√πy ch·ªânh</option>
      </select>
    </div>
    <div class="form-group">
      <label for="warning-message">N·ªôi dung c·∫£nh b√°o:</label>
      <textarea id="warning-message" rows="5">Ch√∫ng t√¥i ph√°t hi·ªán t√†i kho·∫£n c·ªßa b·∫°n c√≥ h√†nh vi s·ª≠ d·ª•ng ng√¥n t·ª´ kh√¥ng ph√π h·ª£p tr√™n n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i. Vui l√≤ng xem l·∫°i Quy t·∫Øc c·ªông ƒë·ªìng v√† ƒëi·ªÅu ch·ªânh c√°ch ·ª©ng x·ª≠ ƒë·ªÉ tr√°nh b·ªã ƒë√¨nh ch·ªâ t√†i kho·∫£n.

ƒê√¢y l√† c·∫£nh b√°o ch√≠nh th·ª©c.</textarea>
    </div>
    `,
    () => {
      showNotification('ƒê√£ g·ª≠i c·∫£nh b√°o ƒë·∫øn ng∆∞·ªùi d√πng', 'success');
    }
  );
}

// Show add to database modal
function showAddToDBModal(alertTitle) {
  showModal(
    'Th√™m v√†o c∆° s·ªü d·ªØ li·ªáu',
    `
    <p>Th√™m m·∫´u spam v√†o c∆° s·ªü d·ªØ li·ªáu:</p>
    <p><strong>${alertTitle}</strong></p>
    <div class="form-group">
      <label for="pattern-type">Lo·∫°i m·∫´u:</label>
      <select id="pattern-type">
        <option value="exact">Kh·ªõp ch√≠nh x√°c</option>
        <option value="regex" selected>Bi·ªÉu th·ª©c ch√≠nh quy</option>
        <option value="fuzzy">Kh·ªõp t∆∞∆°ng ƒë·ªëi</option>
      </select>
    </div>
    <div class="form-group">
      <label for="pattern-text">M·∫´u:</label>
      <input type="text" id="pattern-text" value="Gi·∫£m gi√° (\d+)% .* (bit\.ly|goo\.gl|tinyurl\.com)" />
    </div>
    <div class="form-group">
      <label for="pattern-category">Ph√¢n lo·∫°i:</label>
      <select id="pattern-category">
        <option value="offensive">X√∫c ph·∫°m</option>
        <option value="hate">Th√π gh√©t</option>
        <option value="spam" selected>Spam</option>
      </select>
    </div>
    `,
    () => {
      showNotification('ƒê√£ th√™m m·∫´u v√†o c∆° s·ªü d·ªØ li·ªáu', 'success');
    }
  );
}

// Reports functionality
function initializeReports() {
  const reportsList = document.querySelector('.reports-list');
  if (!reportsList) return;
  
  // Handle report actions
  const reportActions = reportsList.querySelectorAll('.report-action');
  
  reportActions.forEach(action => {
    action.addEventListener('click', function() {
      const reportItem = this.closest('.report-item');
      const actionType = this.getAttribute('title');
      const reportTitle = reportItem.querySelector('.report-title').textContent;
      
      switch (actionType) {
        case 'T·∫£i xu·ªëng':
          showNotification(`ƒêang t·∫£i xu·ªëng b√°o c√°o: ${reportTitle}`, 'info');
          break;
        case 'Xem':
          showReportPreview(reportTitle, reportItem);
          break;
        case 'G·ª≠i email':
          showSendReportModal(reportTitle);
          break;
        case 'X√≥a':
          showDeleteReportModal(reportTitle, reportItem);
          break;
      }
    });
  });
  
  // Handle "Create new report" button
  const createReportBtn = document.querySelector('#reports .export-button');
  if (createReportBtn) {
    createReportBtn.addEventListener('click', () => {
      showCreateReportModal();
    });
  }
}

// Show report preview
function showReportPreview(reportTitle, reportItem) {
  // Get report type from icon
  const iconElement = reportItem.querySelector('.report-icon');
  const reportType = iconElement.classList[1]; // e.g., "system", "content", "user", "performance"
  
  // Create sample report preview based on report type
  let previewHTML = `
    <div class="report-preview-header">
      <h4>${reportTitle}</h4>
      <div class="report-meta">
        <span class="report-date">${reportItem.querySelector('.report-date').textContent}</span>
        <span class="report-author">${reportItem.querySelector('.report-author').textContent}</span>
      </div>
    </div>
    <div class="report-preview-body">
  `;
  
  // Add content based on report type
  if (reportType === 'system') {
    previewHTML += `
      <div class="report-section">
        <h5>T·ªïng quan h·ªá th·ªëng</h5>
        <div class="report-chart-placeholder">
          <img src="https://via.placeholder.com/600x300?text=System+Activity+Chart" alt="System Activity Chart" />
        </div>
        <table class="report-table">
          <thead>
            <tr>
              <th>Ch·ªâ s·ªë</th>
              <th>Gi√° tr·ªã</th>
              <th>Thay ƒë·ªïi</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Uptime</td>
              <td>99.8%</td>
              <td class="positive">+0.3%</td>
            </tr>
            <tr>
              <td>Th·ªùi gian ph·∫£n h·ªìi trung b√¨nh</td>
              <td>245ms</td>
              <td class="positive">-15ms</td>
            </tr>
            <tr>
              <td>L∆∞·ª£t qu√©t</td>
              <td>24,891</td>
              <td class="positive">+23%</td>
            </tr>
            <tr>
              <td>API Calls</td>
              <td>152,478</td>
              <td class="positive">+18%</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="report-section">
        <h5>C·∫£nh b√°o h·ªá th·ªëng</h5>
        <p>Kh√¥ng c√≥ c·∫£nh b√°o h·ªá th·ªëng n√†o trong kho·∫£ng th·ªùi gian n√†y.</p>
      </div>
    `;
  } else if (reportType === 'content') {
    previewHTML += `
      <div class="report-section">
        <h5>Ph√¢n t√≠ch n·ªôi dung ƒë·ªôc h·∫°i</h5>
        <div class="report-chart-placeholder">
          <img src="https://via.placeholder.com/600x300?text=Content+Analysis+Chart" alt="Content Analysis Chart" />
        </div>
        <div class="report-subsection">
          <h6>C√°c m·∫´u ph·ªï bi·∫øn</h6>
          <table class="report-table">
            <thead>
              <tr>
                <th>M·∫´u</th>
                <th>Lo·∫°i</th>
                <th>S·ªë l·∫ßn xu·∫•t hi·ªán</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>"ƒë·ªì ngu d·ªët"</td>
                <td>X√∫c ph·∫°m</td>
                <td>145</td>
              </tr>
              <tr>
                <td>"th·∫≠t l√† v√¥ d·ª•ng"</td>
                <td>X√∫c ph·∫°m</td>
                <td>98</td>
              </tr>
              <tr>
                <td>"n√™n b·ªã c·∫•m"</td>
                <td>Th√π gh√©t</td>
                <td>52</td>
              </tr>
              <tr>
                <td>"gi·∫£m gi√° 90%"</td>
                <td>Spam</td>
                <td>203</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;
  } else if (reportType === 'user') {
    previewHTML += `
      <div class="report-section">
        <h5>Th·ªëng k√™ ng∆∞·ªùi d√πng</h5>
        <div class="report-chart-placeholder">
          <img src="https://via.placeholder.com/600x300?text=User+Activity+Chart" alt="User Activity Chart" />
        </div>
        <div class="report-subsection">
          <h6>Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông nhi·ªÅu nh·∫•t</h6>
          <table class="report-table">
            <thead>
              <tr>
                <th>Ng∆∞·ªùi d√πng</th>
                <th>S·ªë l∆∞·ª£t qu√©t</th>
                <th>Ng√†y ho·∫°t ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>nguyen.van.a</td>
                <td>432</td>
                <td>28</td>
              </tr>
              <tr>
                <td>tran.thi.b</td>
                <td>385</td>
                <td>26</td>
              </tr>
              <tr>
                <td>le.van.c</td>
                <td>312</td>
                <td>22</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;
  } else if (reportType === 'performance') {
    previewHTML += `
      <div class="report-section">
        <h5>Hi·ªáu su·∫•t h·ªá th·ªëng</h5>
        <div class="report-chart-placeholder">
          <img src="https://via.placeholder.com/600x300?text=Performance+Chart" alt="Performance Chart" />
        </div>
        <div class="report-subsection">
          <h6>Chi ti·∫øt API</h6>
          <table class="report-table">
            <thead>
              <tr>
                <th>Endpoint</th>
                <th>Th·ªùi gian ph·∫£n h·ªìi</th>
                <th>S·ªë l∆∞·ª£t g·ªçi</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/extension/detect</td>
                <td>245ms</td>
                <td>18,456</td>
              </tr>
              <tr>
                <td>/predict/single</td>
                <td>320ms</td>
                <td>3,221</td>
              </tr>
              <tr>
                <td>/predict/batch</td>
                <td>580ms</td>
                <td>942</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;
  }
  
  previewHTML += `</div>`;
  
  showModal(
    reportTitle,
    previewHTML,
    null, // No confirmation action
    false // No confirmation button
  );
}

// Download report
function downloadReport(reportTitle, reportItem) {
  // Get report format
  const formatElement = reportItem.querySelector('.report-format');
  const format = formatElement ? formatElement.textContent.toLowerCase() : 'pdf';
  
  // Show loading notification
  showNotification(`ƒêang t·∫£i xu·ªëng b√°o c√°o: ${reportTitle}...`, 'info');
  
  // Simulate download delay
  setTimeout(() => {
    showNotification(`ƒê√£ t·∫£i xu·ªëng b√°o c√°o: ${reportTitle}`, 'success');
  }, 1500);
}

// Show send report modal
function showSendReportModal(reportTitle) {
  showModal(
    'G·ª≠i b√°o c√°o qua email',
    `
    <p>G·ª≠i b√°o c√°o <strong>${reportTitle}</strong> qua email.</p>
    <div class="form-group">
      <label for="email-recipients">Ng∆∞·ªùi nh·∫≠n:</label>
      <input type="text" id="email-recipients" placeholder="email@example.com, email2@example.com" />
    </div>
    <div class="form-group">
      <label for="email-subject">Ti√™u ƒë·ªÅ:</label>
      <input type="text" id="email-subject" value="B√°o c√°o: ${reportTitle}" />
    </div>
    <div class="form-group">
      <label for="email-message">N·ªôi dung:</label>
      <textarea id="email-message" rows="4">K√≠nh g·ª≠i,

Vui l√≤ng xem b√°o c√°o ƒë√≠nh k√®m.

Tr√¢n tr·ªçng,
H·ªá th·ªëng Toxic Language Detector</textarea>
    </div>
    <div class="form-group checkbox-group">
      <label class="checkbox-label">
        <input type="checkbox" id="email-attach-pdf" checked>
        <span class="checkbox-custom"></span>
        <span>ƒê√≠nh k√®m PDF</span>
      </label>
    </div>
    `,
    () => {
      const recipients = document.getElementById('email-recipients').value;
      showNotification(`ƒê√£ g·ª≠i b√°o c√°o ƒë·∫øn: ${recipients}`, 'success');
    }
  );
}

// Show delete report modal
function showDeleteReportModal(reportTitle, reportItem) {
  showModal(
    'X√≥a b√°o c√°o',
    `
    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√°o c√°o <strong>${reportTitle}</strong>?</p>
    <p>H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
    `,
    () => {
      // Remove report item from DOM
      reportItem.style.height = reportItem.offsetHeight + 'px';
      reportItem.style.overflow = 'hidden';
      setTimeout(() => {
        reportItem.style.height = '0';
        reportItem.style.padding = '0';
        reportItem.style.margin = '0';
        
        setTimeout(() => {
          reportItem.remove();
          showNotification(`ƒê√£ x√≥a b√°o c√°o: ${reportTitle}`, 'success');
        }, 300);
      }, 10);
    }
  );
}

// Show create report modal
function showCreateReportModal() {
  showModal(
    'T·∫°o b√°o c√°o m·ªõi',
    `
    <div class="form-group">
      <label for="report-type">Lo·∫°i b√°o c√°o:</label>
      <select id="report-type">
        <option value="system">Ho·∫°t ƒë·ªông h·ªá th·ªëng</option>
        <option value="content">Ph√¢n t√≠ch n·ªôi dung</option>
        <option value="user">Ng∆∞·ªùi d√πng</option>
        <option value="performance">Hi·ªáu su·∫•t</option>
        <option value="custom">T√πy ch·ªânh</option>
      </select>
    </div>
    <div class="form-group">
      <label for="report-title">Ti√™u ƒë·ªÅ b√°o c√°o:</label>
      <input type="text" id="report-title" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√°o c√°o" />
    </div>
    <div class="form-group">
      <label for="report-timerange">Kho·∫£ng th·ªùi gian:</label>
      <select id="report-timerange">
        <option value="day">24 gi·ªù qua</option>
        <option value="week" selected>7 ng√†y qua</option>
        <option value="month">30 ng√†y qua</option>
        <option value="year">12 th√°ng qua</option>
        <option value="custom">T√πy ch·ªânh</option>
      </select>
    </div>
    <div id="custom-timerange" style="display: none;">
      <div class="form-group">
        <label for="report-start-date">T·ª´ ng√†y:</label>
        <input type="date" id="report-start-date" />
      </div>
      <div class="form-group">
        <label for="report-end-date">ƒê·∫øn ng√†y:</label>
        <input type="date" id="report-end-date" />
      </div>
    </div>
    <div class="form-group">
      <label for="report-format">ƒê·ªãnh d·∫°ng:</label>
      <select id="report-format">
        <option value="pdf" selected>PDF</option>
        <option value="xlsx">Excel (XLSX)</option>
        <option value="csv">CSV</option>
      </select>
    </div>
    <div class="form-group checkbox-group">
      <label class="checkbox-label">
        <input type="checkbox" id="report-schedule" />
        <span class="checkbox-custom"></span>
        <span>L√™n l·ªãch t·ª± ƒë·ªông</span>
      </label>
    </div>
    <div id="report-schedule-options" style="display: none;">
      <div class="form-group">
        <label for="report-frequency">T·∫ßn su·∫•t:</label>
        <select id="report-frequency">
          <option value="daily">H√†ng ng√†y</option>
          <option value="weekly" selected>H√†ng tu·∫ßn</option>
          <option value="monthly">H√†ng th√°ng</option>
        </select>
      </div>
      <div class="form-group">
        <label for="report-recipients">G·ª≠i ƒë·∫øn email:</label>
        <input type="text" id="report-recipients" placeholder="email@example.com" />
      </div>
    </div>
    `,
    () => {
      // Get report values
      const type = document.getElementById('report-type').value;
      const title = document.getElementById('report-title').value || 'B√°o c√°o m·ªõi';
      const timerange = document.getElementById('report-timerange').value;
      const format = document.getElementById('report-format').value;
      
      // Show creating notification
      showNotification('ƒêang t·∫°o b√°o c√°o...', 'info');
      
      // Simulate report creation delay
      setTimeout(() => {
        // Show success notification
        showNotification('ƒê√£ t·∫°o b√°o c√°o th√†nh c√¥ng', 'success');
        
        // Add new report to list
        const reportsList = document.querySelector('.reports-list');
        if (reportsList) {
          const newReport = document.createElement('div');
          newReport.className = 'report-item';
          newReport.innerHTML = `
            <div class="report-icon ${type}">üìä</div>
            <div class="report-details">
              <div class="report-title">${title}</div>
              <div class="report-description">B√°o c√°o ${
                type === 'system' ? 'ho·∫°t ƒë·ªông h·ªá th·ªëng' :
                type === 'content' ? 'ph√¢n t√≠ch n·ªôi dung' :
                type === 'user' ? 'ng∆∞·ªùi d√πng' :
                type === 'performance' ? 'hi·ªáu su·∫•t' : 't√πy ch·ªânh'
              } (${
                timerange === 'day' ? '24 gi·ªù qua' :
                timerange === 'week' ? '7 ng√†y qua' :
                timerange === 'month' ? '30 ng√†y qua' :
                timerange === 'year' ? '12 th√°ng qua' : 'kho·∫£ng th·ªùi gian t√πy ch·ªânh'
              })</div>
              <div class="report-meta">
                <span class="report-date">${new Date().toLocaleDateString('vi-VN')}</span>
                <span class="report-author">Admin</span>
              </div>
            </div>
            <div class="report-format">${format.toUpperCase()}</div>
            <div class="report-actions">
              <button class="report-action" title="T·∫£i xu·ªëng">üì•</button>
              <button class="report-action" title="Xem">üëÅÔ∏è</button>
              <button class="report-action" title="G·ª≠i email">üìß</button>
              <button class="report-action" title="X√≥a">üóëÔ∏è</button>
            </div>
          `;
          
          // Add to DOM
          reportsList.prepend(newReport);
          
          // Add event listeners to new report
          initializeReports();
        }
      }, 2000);
    }
  );
  
  // Handle timerange change
  const timerangeSelect = document.getElementById('report-timerange');
  const customTimerange = document.getElementById('custom-timerange');
  
  if (timerangeSelect && customTimerange) {
    timerangeSelect.addEventListener('change', function() {
      customTimerange.style.display = this.value === 'custom' ? 'block' : 'none';
    });
  }
  
  // Handle schedule checkbox
  const scheduleCheckbox = document.getElementById('report-schedule');
  const scheduleOptions = document.getElementById('report-schedule-options');
  
  if (scheduleCheckbox && scheduleOptions) {
    scheduleCheckbox.addEventListener('change', function() {
      scheduleOptions.style.display = this.checked ? 'block' : 'none';
    });
  }
}

// Initialize analytics data
function initializeAnalytics() {
  // For demo purposes, we'll just populate the Analytics section with sample data
  const analyticsSection = document.getElementById('analytics');
  if (!analyticsSection) return;
  
  // Generate heatmap
  generateHeatmap();
  
  // Add interaction to chart tabs in the Analytics section
  const chartTabs = analyticsSection.querySelectorAll('.chart-tab');
  
  chartTabs.forEach(tab => {
    tab.addEventListener('click', function() {
      const tabGroup = this.closest('.chart-tabs');
      const view = this.getAttribute('data-view');
      
      // Update active tab
      tabGroup.querySelectorAll('.chart-tab').forEach(t => {
        t.classList.remove('active');
      });
      this.classList.add('active');
      
      // In a real app, this would update the chart data based on the selected view
      console.log(`Changing view to ${view}`);
      
      // Show notification
      showNotification(`ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô xem: ${
        view === 'day' ? 'Theo ng√†y' : 
        view === 'week' ? 'Theo tu·∫ßn' : 
        view === 'hour' ? 'Theo gi·ªù' : 'M·∫∑c ƒë·ªãnh'
      }`, 'info');
    });
  });
}

// Generate heatmap
function generateHeatmap() {
  const heatmapGrid = document.querySelector('.heatmap-grid');
  if (!heatmapGrid) return;
  
  // Clear any existing cells
  heatmapGrid.innerHTML = '';
  
  // Generate cells for a 7x24 heatmap (days of week x hours of day)
  const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'CN'];
  
  for (let hour = 0; hour < 24; hour++) {
    for (let day = 0; day < 7; day++) {
      // Generate intensity (higher during working hours, lower on weekends)
      let intensity = 0.1; // Base low intensity
      
      // Increase intensity during working hours (8am-6pm)
      if (hour >= 8 && hour <= 18) {
        // Workdays have higher intensity
        if (day < 5) { // Mon-Fri
          intensity = 0.3 + Math.random() * 0.6; // 0.3-0.9
        } else { // Weekend
          intensity = 0.1 + Math.random() * 0.3; // 0.1-0.4
        }
      }
      
      // Create cell
      const cell = document.createElement('div');
      cell.className = 'heatmap-cell';
      cell.style.backgroundColor = `rgba(76, 175, 80, ${intensity})`;
      
      // Add tooltip with the day, hour, and value
      const value = Math.round(intensity * 100);
      cell.setAttribute('title', `${days[day]} ${hour}:00 - ${value} ph√°t hi·ªán`);
      
      // Add to grid
      heatmapGrid.appendChild(cell);
    }
  }
}